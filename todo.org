* add func prim
** add func-emit
*** emit as lisp defun with gensym id & tagbody
**** bind named args (alisp)
* add call flags
** add d flag/drop
** add t flag/tail call
** add m flag/memoize
* add math lib
* fib
* add multi
* add stack type
** add stack prim
** push copy of stack
** readme
* add iters
** add for prim
* add vset.lisp
** based on ordinary vector
** binary search
** take compare/key as find args
** use (replace) to move items
** add new-set constructor from iter
*** start empty and insert one at a time
* add refs
** &foo
** require id form
** push value as is

func fibrec [n Int] [Int] { 
  if n.< 2 n + fibrec n.- 1 fibrec n.- 2 
}

fibrec 10

